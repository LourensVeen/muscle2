Requirements:

  CMAKE

Build - typical cmake build:

  mkdir build
  cd build
  cmake ..
  make

Config:

  In file config.cfg (file name can be changed in options.h) or via args.
  Example file dumped below:

    localPortLow   = 10002
    localPortHigh  = 19999
    remotePortLow  = 20002
    remotePortHigh = 29999
    myAddress      = localhost
    myPort         = 10000
    indoorPort     = 10001
    indoorAddress  = 0.0.0.0
    peerAddress    = localhost
    peerPort       = 20000
    
Client communication:

  For details, see messages.(h|cpp)

  REQUEST:

    T|z|S S S S S S S S S S S S S S S S|s s|b|D D D D D D D D D D D D D D D D|d d|I I I I

    T type (1b)
    z source address in IPv4 (1) or IPv6 (2) (1b)
      S source address (IPv6 or IPv4), (16b)
              s source port (2b)
                b source address in IPv4 (1) or IPv6 (2) (1b)
                  S destination address (IPv6 or IPv4), (16b)
                          d desination port (2b)
                              IIII some session id (unused)
  
  RESPONSE:

    REQUEST | R R R R
  
    REQUEST as above
              R response

  Type:
    
    1 - register listening port
    2 - connect
    3 - response to connect

  All data is written in network byte order, which is big-endian (127.0.0.1
  will be written as 0x7f 0x00 0x00 0x01). The IPv4 address will be
  contained in the first 4 bytes of the destination address field, the IPv6
  address will take the full 16 bytes.

  1) BIND
  
    Client sends a request with type 1 and src adress/port to the MTO and closes.

  2) Connect

    Client sends a request with type 2 and src/dest address/port to the MTO.
    Client waits for the response. If response is 0, the connect succeeded.
    If the response is non-zero (i.e. 1), the connection failed and MTO closes the connection
    Client exchanges data with peer normally.
