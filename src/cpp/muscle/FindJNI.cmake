# find JNI libraries and header files
# we first call the default FindJNI.cmake of the current cmake installation,
# if this fails, we try with custom paths (see FindJNI.custom.cmake)
# author: Jan Hegewald


# load the FindJNI.cmake which belongs to the local cmake
INCLUDE(${CMAKE_ROOT}/Modules/FindJNI.cmake)

#MESSAGE(STATUS "default:")
#MESSAGE(STATUS "JNI_INCLUDE_DIRS : ${JNI_INCLUDE_DIRS}")
#MESSAGE(STATUS "JNI_LIBRARIES : ${JNI_LIBRARIES}")
#MESSAGE(STATUS "JAVA_AWT_LIBRARY : ${JAVA_AWT_LIBRARY}")
#MESSAGE(STATUS "JAVA_JVM_LIBRARY : ${JAVA_JVM_LIBRARY}")
#MESSAGE(STATUS "JAVA_AWT_LIB_PATH : ${JAVA_AWT_LIB_PATH}")
#MESSAGE(STATUS "JAVA_JVM_LIB_PATH : ${JAVA_JVM_LIB_PATH}")
#MESSAGE(STATUS "JAVA_INCLUDE_PATH : ${JAVA_INCLUDE_PATH}")
#MESSAGE(STATUS "JAVA_INCLUDE_PATH2 : ${JAVA_INCLUDE_PATH2}")
#MESSAGE(STATUS "JAVA_AWT_INCLUDE_PATH : ${JAVA_AWT_INCLUDE_PATH}")

# load our custom FindJNI.custom.cmake if the default one failed
IF(NOT JAVA_INCLUDE_PATH-NOTFOUND)
	
	# path to parent dir of this file
	GET_FILENAME_COMPONENT(PARENT_DIR ${CMAKE_CURRENT_LIST_FILE} PATH)

	# load our customized JNI search
	INCLUDE(${PARENT_DIR}/FindJNI.custom.cmake)
	
#	MESSAGE(STATUS "custom:")
#	MESSAGE(STATUS "JNI_INCLUDE_DIRS : ${JNI_INCLUDE_DIRS}")
#	MESSAGE(STATUS "JNI_LIBRARIES : ${JNI_LIBRARIES}")
#	MESSAGE(STATUS "JAVA_AWT_LIBRARY : ${JAVA_AWT_LIBRARY}")
#	MESSAGE(STATUS "JAVA_JVM_LIBRARY : ${JAVA_JVM_LIBRARY}")
#	MESSAGE(STATUS "JAVA_AWT_LIB_PATH : ${JAVA_AWT_LIB_PATH}")
#	MESSAGE(STATUS "JAVA_JVM_LIB_PATH : ${JAVA_JVM_LIB_PATH}")
#	MESSAGE(STATUS "JAVA_INCLUDE_PATH : ${JAVA_INCLUDE_PATH}")
#	MESSAGE(STATUS "JAVA_INCLUDE_PATH2 : ${JAVA_INCLUDE_PATH2}")
#	MESSAGE(STATUS "JAVA_AWT_INCLUDE_PATH : ${JAVA_AWT_INCLUDE_PATH}")

ENDIF(NOT JAVA_INCLUDE_PATH-NOTFOUND)

